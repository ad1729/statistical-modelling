?Scan
?scan
library(car)
?readR
??readR
wd()
cdir()
slid = read.table("/home/ad/Desktop/KUL Course Material/Statistical Modelling/Datasets/SLID.txt", header = T, stringsAsFactors = FALSE)
some(slid)
?some
plot(wages ~ education, data = slid)
plot(log(wages) ~ education, data = slid)
qqnorm(wages)
qqnorm(slid$wages)
qqnorm(log(slid$wages))
?glm
str(slid)
slid = read.table("/home/ad/Desktop/KUL Course Material/Statistical Modelling/Datasets/SLID.txt", header = T)
str(slid)
some(slid)
# (a)
plot(wages ~ education, data = slid)
plot(log(wages) ~ education, data = slid)
qqnorm(slid$wages)
qqnorm(log(slid$wages))
?qqline
qqplot(slid$wages)
qqline(slid$wages, col = 2)
qqnorm(slid$wages)
qqnorm(log(slid$wages))
fit1 = glm(log(wages) ~ ., data = slid)
summary(fit1)
dim(slid)
plot(fit1)
?grid.arrange
??grid.arrange
model.check = function(fit){
summary(fit)
par(mfrow = c(2,2))
plot(fit)
par(mfrow = c(1,1))
}
model.check(fit1)
model.check = function(fit){
print(summary(fit))
par(mfrow = c(2,2))
plot(fit)
par(mfrow = c(1,1))
}
fit1 = glm(log(wages) ~ ., data = slid)
model.check(fit1)
?glm
fit1 = lm(log(wages) ~ ., data = slid)
model.check(fit1)
install.packages("readr", dep = T)
fit2 = glm(wages ~ ., data = slid, family = Gamma(link = "log"))
model.check(fit2)
model.check(fit1)
library(flexmix)
install.packages("flexmix", dep = T)
library(flexmix)
str(flexmix::bioChemists)
exists(bioChemists)
exists(data(bioChemists))
str(data("bioChemists"))
some("bioChemists")
some(data("bioChemists"))
data("bioChemists")
str(bioChemists)
some(bioChemists)
hist(bioChemists$art)
summary(bioChemists$art)
levels(bioChemists$art)
var.labels(bioChemists)
attr(var.labels(bioChemists))
attr(bioChemists)
attribute(bioChemists)
fit3 = glm(art ~ . , data = bioChemists, family = poisson(link = "log"))
model.check(fit3)
var(bioChemists$art)
mean(bioChemists$art)
?rpois
foo = rpois(1000, 5)
hist(foo)
foo = rpois(1000, 0.5)
hist(foo)
foo = rpois(1000, 0)
hist(foo)
foo = rpois(1000, 0.5)
hist(foo)
hist((foo-mean(foo))/sd(foo))
mean(foo)
var(foo)
library(faraway)
install.packages("faraway", dep = T)
library(faraway)
library(dplyr)
motor = motorins
str(motor)
names(motor)
?glm
?Gamma
hist(motor$perd)
lines(density(motor$perd))
hist(motor$perd, freq = T)
lines(density(motor$perd))
?density
?hsit
?hist
hist(motor$perd, probability = TRUE)
lines(density(motor$perd))
?density
lines(density(motor$perd, bw = 0.5))
lines(density(motor$perd, bw = 2))
hist(motor$perd, probability = TRUE)
lines(density(motor$perd, bw = 2))
hist(motor$perd, probability = TRUE)
lines(density(motor$perd, bw = 0.01))
hist(motor$perd, probability = TRUE)
lines(density(motor$perd, kernel = "epa"))
hist(motor$perd, probability = TRUE)
fit1 = glm(perd ~ . , family = Gamma(link = "inverse"), data = motor)
?complete.cases
complete.cases(motor)
?glm
fit1 = glm(perd ~ . , family = Gamma(link = "inverse"), data = motor)
str(motor)
fit1 = glm(perd ~ .  - Kilometres, family = Gamma(link = "inverse"), data = motor)
install.packages("CausalImpact")
devtools::install_github("google/CausalImpact")
library(CausalImpact)
devtools::install_github("google/CausalImpact")
install.packages(c("bsts", "Boom", "BoomSpikeSlab", dep = T)
install.packages(c("bsts", "Boom", "BoomSpikeSlab"), dep = T)
devtools::install_github("google/CausalImpact")
install.packages("dtw")
install.packages("MarketMatching")
fit1 = glm(perd ~ ., family = Gamma(link = "inverse"), data = motor)
names(motor)
str(motor)
?glm
?Gamma
?glm
fit1 = glm(perd ~ ., family = Gamma(link = "inverse"), data = motor)
library(faraway)
library(dplyr)
motor = motorins
names(motor)
str(motor)
fit1 = glm(perd ~ ., family = Gamma(link = "inverse"), data = motor)
fit1 = glm(perd ~ ., family = Gamma(link = "inverse"), start = rep(1, 7), data = motor)
fit1 = glm(perd ~ ., family = Gamma(link = "inverse"), start = rep(1, 23), data = motor)
warnings(0)
hist(motor$perd, probability = TRUE)
fit1 = glm(perd ~ ., family = Gamma(link = "inverse"), data = motor)
?scatterplot
?pairs
cor(motor)
str(motor)
?cor
cor(motor, method = "spearman")
pairs(motor)
cor(motor[,4:8], method = "spearman")
str(motor[,4:8])
cor(motor[,5:8], method = "spearman")
cor(motor[,5:8], method = "pearson")
?scale
cor(scale(motor[,5:8]), method = "spearman")
solve(cor(motor[,5:8], method = "pearson"))
diag(solve(cor(motor[,5:8], method = "pearson")))
diag(solve(cor(motor[,5:8], method = "spearman"))) # gives us the VIF
?is.na
?is.null
diag(solve(cor(motor[,5:8], method = "spearman"))) # gives us the VIF
diag(solve(cor(motor[,5:8], method = "pearson"))) # gives us the VIF
paste(as.character(1), ".png")
paste(as.character(1), ".png", sep = "")
pairs(motor)
install.packages("MVN")
install.packages("MVN", dep = T)
library(MVN)
cor(motor[,5:8], method = "spearman")
cor(motor[,5:8], method = "pearson")
cor(motor[,5:8], method = "kendall")
?`MVN-package`
search()
detach(2)
search()
MVN::mardiaTest(motor[,5:8])
MVN::mardiaTest(motor[,5:8], qqplot = TRUE)
MVN::mardiaTest(motor[,5:6], qqplot = TRUE)
MVN::mardiaTest(motor[,6:7], qqplot = TRUE)
MVN::mardiaTest(motor[,7:8], qqplot = TRUE)
MVN::mardiaTest(motor[,c(5,7)], qqplot = TRUE)
MVN::mardiaTest(motor[,c(5,8)], qqplot = TRUE)
MVN::mardiaTest(motor[,c(6,8)], qqplot = TRUE)
diag(solve(cor(motor[,5:8], method = "spearman"))) # gives us the VIF
diag(solve(cor(motor[,5:8], method = "pearson"))) # gives us the VIF
MVN::mardiaTest(motor[,5:7], qqplot = TRUE)
dim(motor)
fit1 = glm(perd ~ ., family = Gamma(link = "inverse"), data = motor)
cor(motor[,5:8], method = "spearman")
pairs(motor)
names(motor)
?motorin
?motorins
cor(motor[,5:8], method = "pearson")
cor(motor[,5:8], method = "spearman")
diag(solve(cor(motor[,5:8], method = "spearman"))) # gives us the VIF
diag(solve(cor(motor[,c(5,6,8)], method = "spearman"))) # gives us the VIF
diag(solve(cor(motor[,c(5,8)], method = "spearman"))) # gives us the VIF
diag(solve(cor(motor[,c(5,7,8)], method = "spearman"))) # gives us the VIF
str(motor)
392491/108
cor(motor[,5:8], method = "spearman")
fit1 = glm(perd ~ ., family = Gamma(link = "inverse"), data = motor[,-c(6,7)])
summary(fit1)
?stepAIC
MASS::stepAIC(fit1)
MASS::stepAIC(fit1, scope = list(upper = ~., lower = ~1))
str(motor)
?drop1
plot(fit1)
par(mfrow = c(2,2))
plot(fit1)
par(mfrow = c(1,1))
??diagnostics
drop1(fit1, test = "F")
?update
fit2 = update(fit1, family = Gamma(link = "identity"))
fit2 = glm(perd ~ ., family = Gamma(link = "identity"), data = motor[,-c(6,7)])
fit2 = glm(perd ~ ., family = Gamma(link = "log"), data = motor[,-c(6,7)])
fit2 = update(fit1, family = Gamma(link = "log"))
summary(fit2)
par(mfrow = c(2,2))
plot(fit2)
par(mfrow = c(1,1))
drop1(fit2, test = "F")
MASS::stepAIC(fit2, scope = list(upper = ~., lower = ~1 + Make))
MASS::stepAIC(fit2, scope = list(upper = ~., lower = ~1 + Make + Zone))
MASS::stepAIC(fit2, scope = list(upper = ~., lower = ~1))
drop1(fit2, test = "F")
