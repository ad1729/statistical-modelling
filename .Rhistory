ada_coef %>% filter("1" != 0) %>% select(!"1")
names(ada_coef)
ada_coef = coef(ada_lass, s = 0.1370) %>% data.matrix()
str(ada_coef)
summary(ada_coef)
ada_coef = coef(ada_lass, s = 0.1370) %>% data.frame()
ada_coef = coef(ada_lass, s = 0.1370) %>% as.matrix() %>% data.frame()
str(ada_coef)
ada_coef = coef(ada_lass, s = 0.1370) %>% as.matrix() #%>% data.frame(. , )
head(ada_coef)
head(ada_coef[ada_coef!=0])
head(ada_coef[which(ada_coef!=0]))
head(ada_coef[ada_coef != 0])
ada_coef[ada_coef != 0]
?which
ada_coef[ada_coef != 0,]
ada_coef[ada_coef != 0,] %>% round(digits = 3)
ada_coef[ada_coef != 0,] %>% round(digits = 4)
set.seed(475672)
2:6
seq_along(2:6)
as.name("temp") <- 2
as.symbol("temp") <- 2
?runif
?rpois
n = 50 # 50, 400
x2 = runif(n, -1, 1)
x3 = runif(n, -1, 1)
x4 = runif(n, -1, 1)
x5 = runif(n, -1, 1)
x6 = runif(n, -1, 1)
mu_i = (1/3) + ((2/3) * x2) + x3 + ((4/3) * x4) + (0 * x5) + (0 * x6)
summary(mu_i)
y_pois = rpois(n, exp(mu_i))
summary(y_pois)
des_mat = data.frame(Int = 1/3, x2, x3, x4, x5, x6)
des_mat
des_mat = data.frame(Intercept = 1, x2, x3, x4, x5, x6)
L = 5
combinations = function(L){
comb = NULL
for (i in 1:L) {comb = rbind(cbind(1,comb),cbind(0,comb))}
return(comb)
}
temp = combinations(5)
temp
rbind(cbind(1,comb),cbind(0,comb))
for (i in 1:L) {comb = rbind(cbind(1,comb),cbind(0,comb))}
??comb
?combn
comb(0,2)
combn(0,2)
combn(1:5,2)
combn(0:1, 5)
combn(0:1, 1)
combn(0:1, 2)
comb = NULL
for (i in 1:1) {comb = rbind(cbind(1,comb),cbind(0,comb))}
comb
comb = NULL
for (i in 1:2) {comb = rbind(cbind(1,comb),cbind(0,comb))}
comb
combination = cbind(1, combinations(5))
combination[1,]
des_mat[,combination[j,] > 0] %>% head()
des_mat[,combination[1,] > 0] %>% head()
combination[1,] > 0
combination[5,] > 0
?glm
all.equal(x2, x3)
identical(x2, x3)
aic = c()
bic = c()
for (j in 1:(2 ^ L)) {
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
fitj = glm(y_pois ~ des_mat[,combination[j,] > 0] - 1, family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
for (j in 1:(2 ^ L)) {
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
fitj = glm(y_pois ~ . - 1, data = des_mat[,combination[j,] > 0], family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
des_mat[,combination[j,] > 0] %>% head()
des_mat[,combination[5,] > 0] %>% head()
j
seq_along(2^L)
L
seq_along(1:2^L)
for (j in 1:2 ^ L) {
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
fitj = glm(y_pois ~ . - 1, data = des_mat[,combination[j,] > 0], family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
j = 3
fitj = glm(y_pois ~ 0 + ., data = des_mat[,combination[j,] > 0], family = poisson)
combination = cbind(1, combinations(5))
aic = c()
bic = c()
for (j in 1:2 ^ L) {
#j = 3
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
fitj = glm(y_pois ~ 0 + ., data = des_mat[,combination[j,] > 0], family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
for (j in 1:2 ^ L) {
#j = 3
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
fit1 = glm(y_pois ~ 0 + ., data = des_mat[,combination[j,] > 0], family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
des_mat[,combination[j,] > 0] %>% head()
des_mat[,combination[3,] > 0] %>% head()
des_mat[,combination[1,] > 0] %>% head()
des_mat[,combination[1,] > 0] %>% str()
combination = cbind(1, combinations(5))
aic = c()
bic = c()
for (j in seq_along(2 ^ L)) {
#j = 3
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
fit1 = glm(y_pois ~ 0 + ., data = des_mat[,combination[j,] > 0], family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
aic
seq_along(2^L)
seq_along(1:2^L)
combination = cbind(1, combinations(5))
aic = c()
bic = c()
for (j in seq_along(1:2 ^ L)) {
#j = 3
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
fit1 = glm(y_pois ~ 0 + ., data = des_mat[,combination[j,] > 0], family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
fit1 = glm(y_pois ~ des_mat[,combination[j,] > 0] - 1, family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
aic
aic = c()
bic = c()
for (j in seq_along(1:2 ^ L)) {
#j = 3
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
fit1 = glm(y_pois ~ des_mat[,combination[j,] > 0] - 1, family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
aic = c()
bic = c()
for (i in seq_along(1:2 ^ L)) {
#i = 3
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
fit1 = glm(y_pois ~ des_mat[,combination[i,] > 0] - 1, family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
j = 3
temp_df = des_mat[,combination[j,] > 0]
str(temp_df)
names(temp_df)
temp_df = des_mat[,combination[25,] > 0]
names(temp_df)
paste(names(temp_df), collapse = " + ")
as.name(paste(names(temp_df), collapse = " + "))
as.formula(paste(names(temp_df), collapse = " + "))
paste("y_pois ~ ", paste(names(temp_df), collapse = " + "), sep = "")
str(y_pois)
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ ", ., sep = "") %>% as.name()
formulae
for (j in seq_along(1:2 ^ L)) {
#j = 3
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
temp_df = des_mat[,combination[j,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ ", ., sep = "") %>% as.name()
fit1 = glm(formula = formulae, data = temp_df, family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
for (j in seq_along(1:2 ^ L)) {
#j = 3
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
temp_df = des_mat[,combination[j,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ ", ., sep = "")
fit1 = glm(formula = formulae, data = temp_df, family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
?formula
temp_df = des_mat[,combination[j,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ ", ., sep = "")
formulae
for (i in seq_along(1:2 ^ L)) {
#i = 3
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
temp_df = des_mat[,combination[i,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ ", ., sep = "")
fit1 = glm(formula = formulae, data = temp_df, family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
seq_along(1:2 ^ L)
for (i in seq_along(1:2 ^ L)) {
#i = 3
print(i)
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
temp_df = des_mat[,combination[i,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ ", ., sep = "")
fit1 = glm(formula = formulae, data = temp_df, family = poisson)
aic[j] = AIC(fitj)
bic[j] = BIC(fitj)
#TIC
}
temp_df = des_mat[,combination[i,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ ", ., sep = "")
formulae
temp_df = des_mat[,combination[4,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ ", ., sep = "")
formulae
temp_df = des_mat[,combination[1,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ 0 + ", ., sep = ""); formulae
temp_df = des_mat[,combination[1,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ 0 + ", ., sep = ""); formulae %>% as.formula()
temp_df = des_mat[,combination[1,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ 0 + ", ., sep = "") %>% as.formula()
formulae
environment()
environment(as.formula("y ~ x"))
environment(as.formula("y ~ x", env = new.env()))
aic = c()
bic = c()
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
for (i in seq_along(1:2 ^ L)) {
#i = 3
#print(i)
temp_df = des_mat[,combination[i,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ 0 + ", ., sep = "") %>% as.formula()
fit1 = glm(formulae, data = temp_df, family = poisson)
aic[i] = AIC(fit1)
bic[i] = BIC(fit1)
#TIC
}
temp_df = des_mat[,combination[1,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ 0 + ", ., sep = "") %>% as.formula()
formulae
aic = c()
bic = c()
form = c()
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
#seq_along(1:2 ^ L)
for (i in 1:32) {
#i = 3
#print(i)
temp_df = des_mat[,combination[i,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ 0 + ", ., sep = "") %>% as.formula(env = .GlobalEnv)
fit1 = glm(formulae, data = temp_df, family = poisson)
aic[i] = AIC(fit1)
bic[i] = BIC(fit1)
#TIC
form[i] = formulae
}
aic = c()
bic = c()
form = c()
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
#seq_along(1:2 ^ L)
for (i in 1:32) {
#i = 3
#print(i)
temp_df = des_mat[,combination[i,] > 0]
formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
paste("y_pois ~ 0 + ", ., sep = "") %>% as.formula(env = .GlobalEnv)
fit1 = glm(formulae, data = temp_df, family = poisson)
aic[i] = AIC(fit1)
bic[i] = BIC(fit1)
#TIC
#form[i] = formulae
}
?paste
baseenv()
?parse
library(dplry)
library(dplyr)
aic = c()
bic = c()
form = c()
# des_mat[,combination[j,] > 0] selects the column from the design matrix corresponding to the combination
# so combination[5,] > 0 gives
# > TRUE  TRUE  TRUE FALSE  TRUE  TRUE
# which selects all the columns except the 4th one (so x4 is dropped)
#seq_along(1:2 ^ L)
for (k in 1:32) {
#i = 3
#print(i)
temp_df = des_mat[,combination[k,] > 0]
# formulae = temp_df %>% names() %>% paste(collapse = " + ") %>%
#   paste("y_pois ~ 0 + ", ., sep = "") #%>% as.formula(env = .GlobalEnv)
formulae = paste("y_pois ~ 0 + ",
paste(names(temp_df), collapse = " + "),
sep = "")
fit1 = glm(formulae, data = temp_df, family = poisson)
aic[k] = AIC(fit1)
bic[k] = BIC(fit1)
#TIC
#form[i] = formulae
}
formulae
temp_d
temp_df
des_mat[,combination[1,] > 0]
des_mat[,combination[1,] > 0] %>% str()
library(dplyr)
library(ggplot2)
install.packages("dplyr", dep = T)
library(dplyr)
library(ggplot2)
library(magrittr)
fulldata.A = read.table("/home/ad/Desktop/KUL Course Material/Statistical Modelling/Assignment/Examdata2016-A.txt", header = T)
set.seed(475672)
rownumbers = sample(1:589,size = 150)
mydata.A = fulldata.A[rownumbers,]
mydata.A %<>% mutate(province = floor(mydata.A[,1]/10000) + 9*(floor(mydata.A[,1]/1000) == 21) + 8*(floor(mydata.A[,1]/1000) == 25))
fulldata.A %<>% mutate(province = floor(fulldata.A[,1]/10000) + 9*(floor(fulldata.A[,1]/1000) == 21) + 8*(floor(fulldata.A[,1]/1000) == 25))
mydata.A = mydata.A[sort.list(mydata.A$IntlMig_In),]
#detach(mydata.A)
#attach(temp_data)
# Column 1 contains the NIS (National Institute of Statistics) code of each municipality. This code is
# unique and determines the province. Numbers starting with 1 indicate ‘Antwerp’, starting with 23 and
# 24 means ‘Flemish Brabant’, starting with 25 means ‘Walloon Brabant’, starting with 21 means ’Brussels
# area’. You may consider the Brussels area as a separate ‘province’. Numbers starting with 3 are ‘West-
# Flanders’, with 4 indicate ‘East-Flanders’, 5 indicates ‘Hainaut’, 6 stands for ‘Li`ege’, 7 for ‘Limburg’,
# 8 for ‘Luxembourg’ and 9 for ‘Namur’. In total you should identify 11 such provinces (10 plus Brussels).
province_name = c("Antwerp", "Flemish Brabant", "West Flanders", "East Flanders", "Hainaut", "Liege", "Limburg", "Luxembourg", "Namur", "Walloon Brabant", "Brussels")
# prov_name = NA_character_
#
# for (i in seq_along(province_name)) {
#
#   if (mydata.A$province == i) { prov_name = province_name[i]}
#
# }
str(mydata.A)
names(mydata.A)
# heatmap
str(mydata.A)
names(mydata.A)
# heatmap
mydata.A %>% select(-Code) %>% cor(method = "spearman") %>%
corrplot::corrplot(method = "square", order = "hclust", addCoef.col = "black")
# pairs plot
mydata.A %>% select(-Code) %>% pairs()
attach(mydata.A)
mydata.A %>%
group_by(province) %>%
summarise(birthsPer1000 = mean(y), AvgIntl_in = mean(IntlMig_In))
# H_0:
mydata.A %>%
group_by(province) %>% count(province)
# filter province 2 and 11
temp_df = filter(mydata.A, province %in% c(2,11)) %>%
dplyr::select(y, IntlMig_In, province) %>%
mutate(province = as.factor(province)) %>% arrange(province)
# wilcoxon test for testing the means of crude birth rate
wilcox.test(formula = y ~ province, conf.int = TRUE, data = temp_df)
wilcox.test(formula = IntlMig_In ~ province, conf.int = TRUE, data = temp_df)
# comparing against the whole dataset
fulldata.A %>%
group_by(province) %>% count(province)
# filter province 2 and 11
temp_df_full = filter(fulldata.A, province %in% c(2,11)) %>%
dplyr::select(y, IntlMig_In, province) %>%
mutate(province = as.factor(province)) %>% arrange(province)
# wilcoxon test for testing the means of crude birth rate
wilcox.test(formula = y ~ province, conf.int = TRUE, data = temp_df_full)
wilcox.test(formula = IntlMig_In ~ province, conf.int = TRUE, data = temp_df_full)
# Question 2
# A.2 (i) Construct a flexible regression fit using splines with the number of births per 1000 inhabitants as response and the number of incoming international migrants as a covariate. You can use transformations of both variables if you decide that that should be more appropriate.
#
# (ii) Based on the resulting plot using default values, suggest a simplification with exactly 4 knots. Add to the same plot the fitted line, obtained using these four knots in a linear spline model with truncated polynomials (no penalization). Briefly discuss.
#
# (iii) Use two different model selection criteria to decide which, if any, of these four knots in question A.2(ii) should be kept in the model. Write the selected regression model using statistical notation. Briefly discuss.
plot(log(mydata.A$IntlMig_In), mydata.A$y)
library(splines)
library(SemiPar)
install.packages("SemiPar", dep = T)
library(SemiPar)
fit1 = spm(y ~ f(IntlMig_In), family = "poisson")
summary(fit1)
plot(fit1)
points(IntlMig_In, log(y_temp))
points(IntlMig_In, log(y))
fit_part = glm(y ~ IntlMig_In
+ pmax((IntlMig_In - 50),0)
+ pmax((IntlMig_In - 400),0)
+ pmax((IntlMig_In - 1300),0)
+ pmax((IntlMig_In - 9500),0)
#              + pmax((IntlMig_In - 10000),0)
, family = poisson(link = "log"))
summary(fit_part)
#plot(fit_part)
drop1(fit_part, test = "LRT")
lrtest(update(fit_part, . ~ . - pmax((IntlMig_In - 50),0) - pmax((IntlMig_In - 9500),0)), fit_part)
install.packages("lmtest", dep = T)
library(lmtest)
lrtest(update(fit_part, . ~ . - pmax((IntlMig_In - 50),0) - pmax((IntlMig_In - 9500),0)), fit_part)
fit_part = glm(y ~ IntlMig_In
+ pmax((IntlMig_In - 50),0)
+ pmax((IntlMig_In - 400),0)
+ pmax((IntlMig_In - 1300),0)
+ pmax((IntlMig_In - 9500),0)
#              + pmax((IntlMig_In - 10000),0)
, family = Gamma(link = "log"))
summary(fit_part)
drop1(fit_part, test = "LRT")
lrtest(update(fit_part, . ~ . - pmax((IntlMig_In - 50),0) - pmax((IntlMig_In - 9500),0)), fit_part)
plot(fit1, ylim = c(2,3.2), xlab = "Number of Incoming International Migrants", ylab = "log(Expected birth rate per 1000)", lwd = 2)
points(IntlMig_In, log(y))
#plot((mydata.A$IntlMig_In)^0.5, mydata.A$y)
lines(IntlMig_In, log(fit_part$fitted.values), col = "green", lwd = 3)
abline(v = c(50, 400, 1300, 9500), lty = 2, lwd = 2)
legend(2800, 2.4, legend = c("Penalized Spline (33 knots)", "Linear spline w/ 4 knots (no penalization)"), col = c("black", "green"), lwd = c(2,3), lty = c(1,1))
plot(fit1, ylim = c(2,3.2), xlab = "Number of Incoming International Migrants", ylab = "log(Expected birth rate per 1000)", lwd = 2)
points(IntlMig_In, log(y))
#plot((mydata.A$IntlMig_In)^0.5, mydata.A$y)
lines(IntlMig_In, log(fit_part$fitted.values), col = "green", lwd = 3)
abline(v = c(50, 400, 1300, 9500), lty = 2, lwd = 2)
legend(2800, 2.4, legend = c("Penalized Spline (33 knots)", "Linear spline w/ 4 knots (no penalization)"), col = c("black", "green"), lwd = c(2,3), lty = c(1,1))
title(main = "knots at 50, 400, 1300, 9500")
drop1(fit_part, test = "LRT")
BIC(fit_part)
BIC(update(fit_part, . ~ . - pmax((IntlMig_In - 50),0) - pmax((IntlMig_In - 9500),0)))
